; You won't be able to bytefields in the same environment when using this


(defn- normalize-bit
  "Converts a value to either 0 or 1. All non-zero numbers become 1.
  Other values are tested for truthiness and translated to 1 or 0
  accordingly."
  [value]
  (cond
    (number? value)
    (if (zero? value) 0 1)

    :else
    (if value 1 0)))

(defn- number-as-bits
  "Takes a number and transforms it into a sequence of bit values (0 or
  1) of the specified length."
  [number length]
  (map #(bit-test number %) (reverse (range length))))

(defn bit-text
  "Similar to hex-text but takes a number or boolean value to print
  the single-digit value  1 or 0."
  ([bit]
   (bit-text bit nil))
  ([bit attr-spec]
   (hex-text (normalize-bit bit) 1 attr-spec)))

(defn number-as-bit-labels
  "Takes an arbitrary integer and transforms it into a sequence of box
  labels of the specified length (which defaults to 8 if not supplied)
  corresponding to the bits that make up the integer, in big-endian
  order. If `attr-spec` is supplied, it is passed along to `bit-text`
  to customize the attributes of each label."
  ([number] (number-as-bit-labels number 8 nil))
  ([number length] (number-as-bit-labels number length nil))
  ([number length attr-spec]
   (map #(bit-text % attr-spec) (number-as-bits number length))))

(defn create-bitfield-env
  "sets a couple of globals to format a 
the generated bytefield as a bitfield"
  []
  (def box-width 20)
  (def boxes-per-row 8)
  (def left-margin 1)
  (draw-column-headers {:labels (reverse (take 8 column-labels))}))